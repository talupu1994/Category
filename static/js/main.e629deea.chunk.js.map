{"version":3,"sources":["reducers/mainpage/types.js","reducers/mainpage/actions.js","container/ToolBar/ToolBar.js","container/leftPannel/LeftPannel.js","container/CategoryForm/CategoryForm.js","container/mainpage/mainpage.js","reducers/mainpage/reducer.js","reducers/combinedreducers.js","App.js","serviceWorker.js","index.js"],"names":["ACTION","edit","create","none","createNewCategoty","name","type","payload","deleteCategory","id","saveCategory","selectCurrentCategory","setCategoryList","categoryList","changeToCreateFlag","ToolBar","createNewCategory","props","onDeleteCurrentCategory","currentCategory","this","className","onClick","Component","connect","state","mainpagereducer","selectedCatgory","dispatch","bindActionCreators","LeftPannel","onCayegorySelected","categoryId","listFromStorage","localStorage","getItem","JSON","parse","map","category","clsName","key","CategoryForm","onChangeValue","newVal","setState","currentValue","actionFlag","alert","prevProps","console","log","value","onChange","e","target","currentAction","MainPage","initState","combineReducers","action","length","maxId","Math","max","apply","push","setItem","stringify","newCategoryList","filter","categoryToEdit","find","categoryToSelect","store","createStore","reducer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e629deea.chunk.js","sourcesContent":["export const ADD_NEW_CATEGORY = \"ADD_NEW_CATEGORY\";\r\nexport const SELECT_CATEGORY = \"SELECT_CATEGORY\";\r\nexport const SET_CATEGORY_LIST = \"SET_CATEGORY_LIST\";\r\nexport const DELETE_CATEGORY = \"DELETE_CATEGORY\";\r\nexport const SAVE_CATEGORY = \"SAVE_CATEGORY\";\r\nexport const CHANGE_ACTION_FLAG = \"CHANGE_ACTION_FLAG\";\r\n\r\n//actions\r\nexport const ACTION = {\r\n    edit:'EDIT',\r\n    create:'CREATE',\r\n    none:'NONE'\r\n}","import {ADD_NEW_CATEGORY,\r\n    DELETE_CATEGORY,\r\n    SAVE_CATEGORY,\r\n    SELECT_CATEGORY,\r\n    SET_CATEGORY_LIST,\r\n    CHANGE_ACTION_FLAG,\r\n    ACTION} from './types';\r\n\r\nexport const createNewCategoty = (name) => {\r\n    return {\r\n        type: ADD_NEW_CATEGORY,\r\n        payload:{\r\n            name\r\n        }\r\n    };\r\n}\r\n\r\nexport const deleteCategory = (id) => {\r\n    return{\r\n        type:DELETE_CATEGORY,\r\n    }\r\n}\r\n\r\nexport const saveCategory = (payload)=>{\r\n    return{\r\n        type :SAVE_CATEGORY,\r\n        payload\r\n    }\r\n}\r\n\r\nexport const selectCurrentCategory = (id) => {\r\n    return{\r\n        type:SELECT_CATEGORY,\r\n        payload:id\r\n    }\r\n}\r\n\r\nexport const setCategoryList = (categoryList) => {\r\n    return{\r\n        type:SET_CATEGORY_LIST,\r\n        payload:categoryList\r\n    }\r\n}\r\n\r\nexport const changeToEditFlag = () => {\r\n    return {\r\n        type:CHANGE_ACTION_FLAG,\r\n        payload:ACTION.edit\r\n    }\r\n}\r\n\r\nexport const changeToCreateFlag = () => {\r\n    return {\r\n        type:CHANGE_ACTION_FLAG,\r\n        payload:ACTION.create\r\n    }\r\n}","import React, { Component,Fragment } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux';\r\nimport { changeToCreateFlag,deleteCategory } from '../../reducers/mainpage/actions';\r\nimport './ToolBar.css';\r\n\r\nclass ToolBar extends Component {\r\n    createNewCategory = () => {\r\n        this.props.changeToCreateFlag();\r\n    }\r\n\r\n    onDeleteCurrentCategory = () => {\r\n        this.props.deleteCategory();\r\n    }\r\n    render() {\r\n        const {currentCategory} = this.props;\r\n        return (\r\n            <div className={\"toolbarWrapper\"}>\r\n                <div className={\"title\"}>\r\n                    {\"title text\"}\r\n                </div>\r\n                <div className={\"actionBtnsWrapper\"}>\r\n                    {\r\n                        currentCategory.id &&\r\n                        <div className={\"actionBtn deleteBtn\"} onClick={this.onDeleteCurrentCategory}>delete</div>\r\n                    }\r\n                    {\r\n                        !(currentCategory.id) &&\r\n                        <div className={\"actionBtn createNewCayegory\"} onClick={this.createNewCategory}>Create</div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currentCategory: state.mainpagereducer.selectedCatgory,\r\n    }\r\n}\r\n  \r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        changeToCreateFlag,\r\n        deleteCategory\r\n    },dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ToolBar);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux';\r\nimport { selectCurrentCategory,setCategoryList } from '../../reducers/mainpage/actions';\r\nimport './LeftPannel.css';\r\n\r\nclass LeftPannel extends Component {\r\n    \r\n\r\n    componentDidMount(){\r\n        const listFromStorage = localStorage.getItem(\"categotyList\");\r\n        if(listFromStorage === 'null' || listFromStorage === ''){\r\n            this.props.setCategoryList([]);\r\n        }\r\n        else{\r\n            this.props.setCategoryList(JSON.parse(listFromStorage));\r\n        }\r\n        \r\n    }\r\n\r\n    onCayegorySelected = (categoryId) => {\r\n        this.props.selectCurrentCategory(categoryId);\r\n    }\r\n\r\n    render() {\r\n        const {currentCategory,categoryList} = this.props;\r\n        return (\r\n            <div className={\"leftPannelWrapper\"}>\r\n                {\r\n                    categoryList &&\r\n                    categoryList.map((category) => {\r\n                        const {id,name} = category;\r\n                        let clsName = \"categotyItem\"\r\n                        if(id === currentCategory.id) clsName += \" active\";\r\n                        return(\r\n                            <div key={id} className={clsName} onClick={() => this.onCayegorySelected(id)}>\r\n                                {name}\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currentCategory: state.mainpagereducer.selectedCatgory,\r\n        categoryList : state.mainpagereducer.categoryList\r\n    }\r\n}\r\n  \r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        selectCurrentCategory,\r\n        setCategoryList\r\n    },dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(LeftPannel);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux';\r\nimport { saveCategory,createNewCategoty } from '../../reducers/mainpage/actions';\r\nimport {ACTION} from '../../reducers/mainpage/types';\r\nimport './CategoryForm.css'\r\n\r\n\r\nclass CategoryForm extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            currentValue:\"\"\r\n        }\r\n    }\r\n\r\n    \r\n    componentDidUpdate(prevProps){\r\n        const {currentCategory} = this.props;\r\n        if(currentCategory.id && currentCategory.id !== prevProps.currentCategory.id){\r\n            this.setState({currentValue:currentCategory.name});\r\n        }\r\n    }\r\n\r\n    onChangeValue = (newVal) => {\r\n        this.setState({currentValue:newVal});\r\n    }\r\n\r\n    saveCategory = () => {\r\n        const {currentValue} = this.state;\r\n        const {currentCategory,actionFlag} = this.props;\r\n        if(!currentValue){\r\n            alert(\"cant save empty value\");\r\n        }\r\n        switch(actionFlag){\r\n            case ACTION.create:{\r\n                this.props.createNewCategoty(currentValue);\r\n                break;\r\n            }\r\n            case ACTION.edit:{\r\n                this.props.saveCategory({name:currentValue,id:currentCategory.id});\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    render(){\r\n        const {currentValue} = this.state;\r\n        const {actionFlag,currentCategory} = this.props;\r\n        console.log(currentCategory);\r\n        if(actionFlag === ACTION.none) return \"\";\r\n        return(\r\n            <div className={\"formWrapper\"}>\r\n                <div className={\"titleWrapper\"}>{currentCategory.name}</div>\r\n                <div className={\"inputsWrapper\"}>\r\n                    <div className={\"row\"}>\r\n                        <label>Name:</label>\r\n                        <input type=\"text\" value={currentValue} onChange={(e) => this.onChangeValue(e.target.value)}/>\r\n                    </div>\r\n\r\n                    <div className={\"saveBtn\"} onClick={this.saveCategory}>\r\n                        Save\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currentCategory: state.mainpagereducer.selectedCatgory,\r\n        actionFlag : state.mainpagereducer.currentAction\r\n    }\r\n}\r\n  \r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        saveCategory,\r\n        createNewCategoty\r\n    },dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(CategoryForm);","import React,{Component,Fragment} from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux';\r\nimport './mainPage.css';\r\nimport ToolBar from '../ToolBar/ToolBar';\r\nimport LeftPannel from '../leftPannel/LeftPannel';\r\nimport CategoryForm from '../CategoryForm/CategoryForm';\r\n\r\nclass MainPage extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {currentCategory} = this.props;\r\n        return(\r\n            <Fragment>\r\n                <ToolBar/>\r\n                <div className={\"workSpaceWrapper\"}>\r\n                    <LeftPannel/>\r\n                    <CategoryForm/>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currentCategory: state.mainpagereducer.selectedCatgory,\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n    },dispatch);\r\n  }\r\nexport default connect(mapStateToProps,mapDispatchToProps)(MainPage);\r\n","import {ADD_NEW_CATEGORY,\r\n    DELETE_CATEGORY,\r\n    SAVE_CATEGORY,\r\n    SELECT_CATEGORY,\r\n    SET_CATEGORY_LIST,\r\n    CHANGE_ACTION_FLAG,\r\n    ACTION} from './types';\r\n\r\nvar initState = {\r\n    categoryList:[],\r\n    selectedCatgory:{},\r\n    currentAction:ACTION.none\r\n};\r\n\r\nexport default function (state = initState,action){\r\n    switch(action.type){\r\n        case ADD_NEW_CATEGORY:{\r\n            const {categoryList = []} = state;\r\n            if(categoryList.length > 0){\r\n                const maxId = Math.max.apply(Math, categoryList.map((category) => { return category.id; }));\r\n                action.payload.id = maxId + 1;\r\n            }\r\n            else{\r\n                action.payload.id = 1;\r\n            }\r\n            categoryList.push(action.payload);\r\n            localStorage.setItem(\"categotyList\",JSON.stringify(categoryList));\r\n            return {\r\n                ...state,\r\n                categoryList:[...categoryList]\r\n            };\r\n        }\r\n        case DELETE_CATEGORY:{\r\n            const {categoryList,selectedCatgory} = state;\r\n            const newCategoryList = categoryList.filter(category => category.id !== selectedCatgory.id);\r\n            localStorage.setItem(\"categotyList\",JSON.stringify(newCategoryList));\r\n            return{\r\n                ...state,\r\n                categoryList:newCategoryList,\r\n                selectedCatgory:{},\r\n                currentAction:ACTION.none\r\n            };\r\n            \r\n        }\r\n        case SAVE_CATEGORY:{\r\n            const {categoryList,selectedCatgory} = state;\r\n            const {name,id} = action.payload;\r\n            const categoryToEdit = categoryList.find(category => category.id===id);\r\n            if(categoryToEdit){\r\n                categoryToEdit.name = name;\r\n                selectedCatgory.name = name;\r\n            }\r\n            localStorage.setItem(\"categotyList\",JSON.stringify(categoryList));\r\n            return{\r\n                ...state,\r\n                categoryList:[...categoryList],\r\n                selectedCatgory:{...selectedCatgory}\r\n            }\r\n        }\r\n        case SELECT_CATEGORY:{\r\n            const {categoryList} = state;\r\n            const {payload} = action;\r\n            const id = payload;\r\n            const categoryToSelect = categoryList.find(category => category.id===id);\r\n            return{\r\n                ...state,\r\n                selectedCatgory:{...categoryToSelect},\r\n                currentAction : ACTION.edit\r\n            }\r\n        }\r\n        case SET_CATEGORY_LIST:{\r\n            localStorage.setItem(\"categotyList\",(JSON.stringify(action.payload) || []));\r\n            return{\r\n                ...state,\r\n                categoryList:action.payload\r\n            }\r\n        }\r\n        case CHANGE_ACTION_FLAG:{\r\n            return{\r\n                ...state,\r\n                currentAction : action.payload\r\n            }\r\n        }\r\n        default:{\r\n            return {...state};\r\n        }\r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport mainpagereducer from './mainpage/reducer';\r\n\r\nexport default combineReducers({\r\n    mainpagereducer\r\n});","import React from 'react';\nimport {createStore} from 'redux';\nimport { Provider } from 'react-redux';\nimport MainPage from './container/mainpage/mainpage';\nimport reducer from './reducers/combinedreducers';\nimport './App.css'\n\nconst store = createStore(reducer);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <MainPage/>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}